=encoding utf-8


=head1 lua-utility


[!L<MIT|https://img.shields.io/badge/license-MIT-blue.svg>](https://github.com/xiedacon/lua-resty-logger/blob/master/LICENSE)


=head2 Requirements



=over


=item *

cjson

=item *

lua-utility

=item *

lua-fs-module


=back


=head2 Usage



    local Logger = require "resty.logger"
    local logger = Logger("test")
    
    logger:info("This is a info")
    -- cat ngx.config.prefix()/logs/info.log
    logger:warn("This is a warn")
    -- cat ngx.config.prefix()/logs/warn.log
    logger:error("This is a error")
    -- cat ngx.config.prefix()/logs/error.log


=head3 自定义日志输出文件



    local Logger = require "resty.logger"
    Logger:set_globle_opts({
      log_file = function(scope, level)
        -- scope: test
        -- level: debug|info|warn|error
        return ngx.config.prefix() .. "logs/example." .. level .. ".log"
      end
    })
    
    local logger = Logger("test")
    
    logger:info("This is a info")
    -- cat ngx.config.prefix()/logs/example.info.log
    logger:warn("This is a warn")
    -- cat ngx.config.prefix()/logs/example.warn.log
    logger:error("This is a error")
    -- cat ngx.config.prefix()/logs/example.error.log


=head3 自定义日志输出级别


默认日志级别如下：


    local LEVELS = {
      error = 0,
      warn = 1,
      info = 2,
      debug = 3
    }

每一个 Logger 实例的日志级别都是相互独立的


    local Logger = require "resty.logger"
    
    local logger = Logger("test1")
    logger:set_opts({
      output_level = 4,
      levels = {
        error = 0,
        info = 2,
        debug = 3,
        trace = 4
      }
    })
    
    logger:trace("This is a trace")
    -- cat ngx.config.prefix()/logs/trace.log
    logger:warn("This is a warn")
    -- Error
    
    local logger = Logger("test2")
    
    logger:trace("This is a trace")
    -- Error
    logger:warn("This is a warn")
    -- cat ngx.config.prefix()/logs/warn.log

默认的输出级别为 C<>infoC<>，可通过 C<>LOGGER_OUTPUT_LEVELC<> 环境变量或 C<>Logger:set_globle_opts()C<> 进行修改。同样的，输出级别也是每个 Logger 实例相互独立的


    -- export LOGGER_OUTPUT_LEVEL="debug"
    local Logger = require "resty.logger"
    
    Logger:set_globle_opts({
      log_file = function(scope, level)
        return table.concat({ ngx.config.prefix(), "logs/", scope, ".", level, ".log" }, "")
      end
    })
    
    local logger1 = Logger("test1")
    logger1:debug("This is a debug")
    -- cat ngx.config.prefix()/logs/test1.debug.log
    
    Logger:set_globle_opts({
      oputput_level = 2
    })
    
    local logger2 = Logger("test2")
    
    logger1:debug("This is a debug")
    -- cat ngx.config.prefix()/logs/test1.debug.log
    logger2:debug("This is a debug")
    -- cat ngx.config.prefix()/logs/test2.debug.log: No such file or directory


=head3 自定义日志格式


lua-resty-logger 的默认日志格式如下：


    2018-10-12 00:00:00 [info] {"scope":"test","data":{},"level":"info","message":"test"}
    2018-10-12 00:00:00 [error] {"scope":"test","data":{},"level":"error","error":"test"}

可通过 C<>Logger:set_globle_opts()C<> 自定义日志格式


    local Logger = require "resty.logger"
    
    -- {
    --   scope = "test",
    --   level = "info",
    --   message = "This is a info",
    --   error = nil,
    --   data = {}
    -- }
    Logger:set_globle_opts({
      formatter = function(log)
        local log_str, err = cjson.encode(log)
        if err then return false, err end
    
        return table.concat({
          ngx.localtime(),
          "(" .. log.level .. ")",
          log_str
        }, " ")
      end
    })
    
    local logger = Logger("test")
    
    logger:info("This is a info")
    -- 2018-10-12 00:00:00 (info) {"scope":"test","data":{},"level":"info","message":"This is a info"}


=head2 API



=head3 Logger([opts])



=over


=item *

C<>opts.levelsC<> C<><tableE<gt>C<> 日志级别

=item *

C<>opts.output_levelC<> C<><numberE<gt>C<> 输出级别

=item *

C<>opts.formatterC<> C<><functionE<gt>C<> 日志处理器


=back


=head3 logger:set_opts(opts)


Same as C<>Logger([opts])C<>


=head3 logger:set_globle_opts(opts)



=over


=item *

C<>opts.flush_intervalC<> C<><numberE<gt>C<> 刷新间隔，默认 10s

=item *

C<>opts.log_fileC<> C<><functionE<gt>C<> 输出文件

=item *

C<>opts.sizeC<> C<><numberE<gt>C<> 内部缓存大小，默认 10000

=item *

C<>opts.levelsC<> C<><tableE<gt>C<> 全局日志级别

=item *

C<>opts.output_levelC<> C<><numberE<gt>C<> 全局数据级别

=item *

C<>opts.formatterC<> C<><functionE<gt>C<> 全局日志处理器


=back


=head3 logger:flush()


强制将日志输出到硬盘


=head3 logger:log(params)



=over


=item *

C<>params.levelC<> C<><stringE<gt>C<> 当前这条日志的级别

=item *

C<>params.messageC<> C<><stringE<gt>C<> 日志描述

=item *

C<>params.errorC<> C<><stringE<gt>C<> 错误描述

=item *

C<>params.metaC<> C<><tableE<gt>C<> 附加信息


=back


=head3 others


创建 Logger 实例时，会将全局 opts 和当前实例的 opts 合并，并创建对应 level 的方法

logger:level([msg], meta)


=over


=item *

C<>msgC<> C<><stringE<gt>C<> 日志描述

=item *

C<>metaC<> C<><tableE<gt>C<> 附加信息


=back

默认会创建以下方法


=over


=item *

C<>logger:debug(msg, meta)C<>

=item *

C<>logger:info(msg, meta)C<>

=item *

C<>logger:warn(msg, meta)C<>

=item *

C<>logger:error(msg, meta)C<>


=back


=head2 License


L<MIT License|https://github.com/xiedacon/lua-resty-logger/blob/master/LICENSE>

Copyright (c) 2018 xiedacon
